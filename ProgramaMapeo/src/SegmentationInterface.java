
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.filechooser.FileNameExtensionFilter;

public class SegmentationInterface extends javax.swing.JInternalFrame {

    /**
     * Creates new form SegmentationInterface
     */
    Imagen img;
    Boolean marcar = true;
    Segmentation segment;
    FileCSVClass csv;
    int pixelesCuadrado;
    Point initialMouseMovement; 
    
    public SegmentationInterface(Imagen img, int nSegmentos, int wxh) {
        initComponents();
        this.img = img;
        panelImagen1.setImagen(img);
        segment = new Segmentation(nSegmentos,wxh);
        panelImagen1.setSegmentation(segment);
        csv = new FileCSVClass(img.getName(), segment);
        pixelesCuadrado = segment.getPixelesSeg();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonSaveSelection = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelImagen1 = new PanelImagen();
        jRadioMarcar = new javax.swing.JRadioButton();
        jRadioDesmarcar = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        buttonSelectAll = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonLoadSelection = new javax.swing.JButton();
        buttonImportSelection1 = new javax.swing.JButton();
        jToggleButtonOcultarRed = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        buttonSaveSelection.setText("Actualizar CSV");
        buttonSaveSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveSelectionActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(525, 525));

        panelImagen1.setOpaque(false);
        panelImagen1.setPreferredSize(new java.awt.Dimension(2240, 2240));
        panelImagen1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelImagen1MouseDragged(evt);
            }
        });
        panelImagen1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelImagen1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelImagen1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelImagen1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelImagen1Layout = new javax.swing.GroupLayout(panelImagen1);
        panelImagen1.setLayout(panelImagen1Layout);
        panelImagen1Layout.setHorizontalGroup(
            panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2240, Short.MAX_VALUE)
        );
        panelImagen1Layout.setVerticalGroup(
            panelImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2240, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelImagen1);

        buttonGroup1.add(jRadioMarcar);
        jRadioMarcar.setSelected(true);
        jRadioMarcar.setText("Marcar");
        jRadioMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioMarcarActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioDesmarcar);
        jRadioDesmarcar.setText("Desmarcar");
        jRadioDesmarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioDesmarcarActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo de selección:");

        buttonSelectAll.setText("Seleccionar todo");
        buttonSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectAllActionPerformed(evt);
            }
        });

        buttonClear.setText("Limpiar selección");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonLoadSelection.setText("Cargar CSV");
        buttonLoadSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadSelectionActionPerformed(evt);
            }
        });

        buttonImportSelection1.setText("Importar CSV");
        buttonImportSelection1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportSelection1ActionPerformed(evt);
            }
        });

        jToggleButtonOcultarRed.setText("Ocultar red");
        jToggleButtonOcultarRed.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonOcultarRedItemStateChanged(evt);
            }
        });

        jLabel2.setText("Archivo CSV:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jRadioMarcar)
                        .addComponent(jRadioDesmarcar)
                        .addComponent(jLabel1)
                        .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSaveSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSelectAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonLoadSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonImportSelection1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButtonOcultarRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioMarcar)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioDesmarcar)
                        .addGap(79, 79, 79)
                        .addComponent(buttonSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jToggleButtonOcultarRed)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonLoadSelection)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSaveSelection)
                        .addGap(18, 18, 18)
                        .addComponent(buttonImportSelection1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        segment.resetMatriz();
        panelImagen1.repaint();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectAllActionPerformed
        segment.allPlastics();
        panelImagen1.repaint();
    }//GEN-LAST:event_buttonSelectAllActionPerformed

    private void jRadioMarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioMarcarActionPerformed
        if (jRadioMarcar.isSelected()==true) {
            marcar = true;
        }
    }//GEN-LAST:event_jRadioMarcarActionPerformed

    private void jRadioDesmarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioDesmarcarActionPerformed
        if (jRadioDesmarcar.isSelected()==true) {
            marcar = false;
        }
    }//GEN-LAST:event_jRadioDesmarcarActionPerformed

    private void panelImagen1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelImagen1MouseClicked
        //Solo permitimos click con el botón izquierdo
        if(evt.getButton() != MouseEvent.BUTTON1){return;}
        //Llamamos a un método que calcula la posició de la imagen correspondiente
        // a la posición del ratón
        Point posImagen = internalPosCoord();

        //División entera para obtener el segmento al que pertecene 
        Point segmentPoint = new Point ((int)posImagen.x/pixelesCuadrado,(int)posImagen.y/pixelesCuadrado);
        
        //Modificamos la matriz
        if (marcar == true) segment.setOne(segmentPoint);
        else segment.setZero(segmentPoint);
        
        //Hay que hacer un repaint para que se actualice y se pinte la imagen
        panelImagen1.repaint();    
    }//GEN-LAST:event_panelImagen1MouseClicked
    
    private Point internalPosCoord(){
        Point coordMouse = MouseInfo.getPointerInfo().getLocation();
        Point coordPadre = this.getTopLevelAncestor().getLocation();
        Point coordEscritorio = this.getLocation();
        Point margenes = new Point(23, 88); //margenes para que cuadre
        
        //OPERAMOS PARA TENER LA POS DEL MOUSE EN FUNCIÓN DE PanelImagen
        int x = -(coordPadre.x + coordEscritorio.x + margenes.x) + coordMouse.x;
        int y = -(coordPadre.y + coordEscritorio.y + margenes.y) + coordMouse.y;
        Point coordMouseDentro = new Point(x,y);
        //printCoord(coordMouseDentro);
        
        //Tenemos que saber que pos de la imagen es, ya que en PanelImagen tiene scroll
        Point coordPosScroll = panelImagen1.getLocation();
        //Hay que multiplicar por -1 ya que el setLocatión devuelve negativo (?)
        coordPosScroll.setLocation(coordPosScroll.x *-1, coordPosScroll.y * -1);
        
        //Sumamos el scroll a la posición actual para tener la pos global de la img
        return new Point(coordPosScroll.x+x,coordPosScroll.y+y);
    }
    
    private void buttonSaveSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveSelectionActionPerformed
        try {
            csv.writeCSV();
            JOptionPane.showMessageDialog(null,"CSV guardado con éxito",
                            "Información",JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"Imagen no válida",
                            "Fallo al abrir",ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSaveSelectionActionPerformed

    private void buttonLoadSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadSelectionActionPerformed
        try {
            csv.loadCSV();
            panelImagen1.repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,
                        "No existe el CSV correspondiente a la imágen en la ubicación por defecto",
                        "Error",ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonLoadSelectionActionPerformed

    private void buttonImportSelection1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportSelection1ActionPerformed
        JFileChooser fc = new javax.swing.JFileChooser();
        fc.setDialogTitle("Seleccionar CSV a importar");
        
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Ficheros csv","csv"));

        int res = fc.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            
            File f = fc.getSelectedFile();
            String path = fc.getSelectedFile().getAbsolutePath();
            String nombre = fc.getSelectedFile().getName();
            
            try {
                //Comprobamos que el archivo es un CSV
                if(nombre.substring(nombre.length()-4).equals(".csv")){
                    csv.importCSV(f);
                    panelImagen1.repaint();
                }else{
                    JOptionPane.showMessageDialog(null,"No es un archivo CSV o es no válido",
                            "CSV erroneo",ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                        "No se puede abrir el CSV",
                        "Error",ERROR_MESSAGE);
            }
            
            
     
        }
    }//GEN-LAST:event_buttonImportSelection1ActionPerformed

    private void jToggleButtonOcultarRedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonOcultarRedItemStateChanged
        if (jToggleButtonOcultarRed.isSelected()) {
            panelImagen1.setRed(false);
            panelImagen1.repaint();
        } else {
            panelImagen1.setRed(true);
            panelImagen1.repaint();
        }
    }//GEN-LAST:event_jToggleButtonOcultarRedItemStateChanged

    private void panelImagen1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelImagen1MousePressed
        //Solo permitimos click con el botón derecho
        if(evt.getButton() != MouseEvent.BUTTON3){return;}
        //Llamamos a un método que calcula la posició de la imagen correspondiente
        // a la posición del ratón al pulsar
        initialMouseMovement = internalPosCoord();
        
    }//GEN-LAST:event_panelImagen1MousePressed

    private void panelImagen1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelImagen1MouseReleased
        //Solo permitimos click con el botón derecho
        if(evt.getButton() != MouseEvent.BUTTON3){return;}
        
        //Llamamos a un método que calcula la posició de la imagen correspondiente
        // a la posición del ratón al soltar
        Point posImagen = internalPosCoord();

        //División entera para obtener el segmento al que pertecene el principio y el final de la selección
        Point InitialSegmentPoint = new Point ((int)initialMouseMovement.x/pixelesCuadrado,(int)initialMouseMovement.y/pixelesCuadrado);
        Point FinalSegmentPoint = new Point ((int)posImagen.x/pixelesCuadrado,(int)posImagen.y/pixelesCuadrado);
       
        //Es mejor comprobar el if antes que en cada iteración 
        if (marcar == true){
            for (int i = InitialSegmentPoint.x; i <= InitialSegmentPoint.x + Math.abs(InitialSegmentPoint.x-FinalSegmentPoint.x); i++) {
                for (int j = InitialSegmentPoint.y; j <= (InitialSegmentPoint.y+ Math.abs(InitialSegmentPoint.y-FinalSegmentPoint.y)); j++) {
                    segment.setOne(i,j);
                }
            }
        } else {
            for (int i = InitialSegmentPoint.x; i <= InitialSegmentPoint.x + Math.abs(InitialSegmentPoint.x-FinalSegmentPoint.x); i++) {
                for (int j = InitialSegmentPoint.y; j <= (InitialSegmentPoint.y+ Math.abs(InitialSegmentPoint.y-FinalSegmentPoint.y)); j++) {
                    segment.setZero(i,j);
                }
            }
        }
        
        //Hay que hacer un repaint para que se actualice y se pinte la imagen
        panelImagen1.repaint();   
        
    }//GEN-LAST:event_panelImagen1MouseReleased

    private void panelImagen1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelImagen1MouseDragged
        
    }//GEN-LAST:event_panelImagen1MouseDragged

    private void printCoord(Point coordMouseDentro){
        Point coordMouse = MouseInfo.getPointerInfo().getLocation();
        //int x=coord.x;
        System.out.println("Coordenadas del mouse:" + coordMouse);
        System.out.println("Posición del escritorio: " + this.getTopLevelAncestor().getLocation());
        System.out.println("Posición de la ventana padre:" + this.getParent().getLocation());
        System.out.println("Posición de la ventana:" + this.getLocation());
        System.out.println("Posición del panelImagen1:" + panelImagen1.getLocation());
        System.out.println("La pos del ratón dentro de la ventana es:"+ coordMouseDentro);
        System.out.println("----------------");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClear;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonImportSelection1;
    private javax.swing.JButton buttonLoadSelection;
    private javax.swing.JButton buttonSaveSelection;
    private javax.swing.JButton buttonSelectAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioDesmarcar;
    private javax.swing.JRadioButton jRadioMarcar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButtonOcultarRed;
    private PanelImagen panelImagen1;
    // End of variables declaration//GEN-END:variables
}
